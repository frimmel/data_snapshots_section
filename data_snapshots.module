<?php

include_once 'data_snapshots.fields.data_snapshot.inc';
include_once 'data_snapshots.field_groups.inc';
include_once 'data_snapshots.ds.inc';
include_once 'data_snapshots.import.inc';
include_once 'data_snapshots.feeds_tamper_default.inc';
include_once 'data_snapshots.switch_callbacks.inc';
include_once 'data_snapshots.padding_stks.inc';
include_once 'data_snapshots.views_default.inc';
include_once 'data_snapshots.context.inc';


/**
 * Implements hook_ctools_plugin_api().
 *
 * This is necessary for our field_group settings to work.
 */
function data_snapshots_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == "field_group" && $api == "field_group") {
    return array("version" => "1");
  }    
  if ($module == "feeds" && $api == "feeds_importer_default") {
    return array("version" => "1");
  }
  if ($module == "feeds_tamper" && $api == "feeds_tamper_default") {
    return array("version" => "2");
  }
  if ($module == "ds" && $api == "ds") {
    return array("version" => "1");
  }
  if ($module == "context" && $api == "context") {
    return array("version" => "3");
  }
}

/**
 * Implements hook_views_api().
 */
function data_snapshots_views_api() {
  return array(
    'version' => '3.0',
    'path' => drupal_get_path('module', 'data_snapshots'),
    'template path' => drupal_get_path('module', 'data_snapshots') . '/templates',
  );
}

/*
 * Implements hook_node_info().
 *
 * Here is where we declare the contents types that our module defines.
 */
function data_snapshots_node_info() {
  $items = array(
    'data_snapshot' => array(
      'name' => t('Data Snapshot'),
      //NOTE: the setting for 'base' seems to determine (at least) two things:
      //      (a) the prefix for forming the names of hook functions for this
      //          content type; e.g. if 'base' => 'BASE', then we can
      //          implement BASE_load(), BASE_view(), etc, and Drupal will
      //          call them when dealing with a node of this content type
      //      (b) whether or not this content type appears in the list of
      //          editable content types in the admin menu at
      //            Administration >> Structure >> Content Types
      //          Note however, that regardless of whether this content type
      //          appears in the list, you can always navigate directly
      //          to the URL for editing it at
      //             admin/structure/types/manage/data-snapshot-data-source
      'base' => 'data_snapshots',
      'description' => t('Content type for Data Snapshots'),
      'has_title' => '1',
      'title_label' => t('Title'),
      'help' => '',
    ),
    'data_snapshot_data_source' => array(
      'name' => t('Data Snapshot Data Source'),
      'base' => 'node_content',
      'description' => t('Content type for Data Snapshot Data Sources'),
      'has_title' => '1',
      'title_label' => t('Public Name for Dataset'),
      'help' => '',
    )
  );
  return $items;
}

/**
 * Implements hook_insert()
 *
 * Inserts records into the custom table data_snapshots when a new node is created.
 */
function data_snapshots_insert($node) {
  if ($node->type == "data_snapshot") {
    db_insert('data_snapshots')
      ->fields(array(
        'nid'  => $node->{'nid'},
        'guid' => "???",
        'dsmn' => $node->{'field_ds_dsds_mn'}['und'][0]['value'],
        'ptk'  =>$node->{'field_ds_ptk'}['und'][0]['value'],
        'stk'  =>$node->{'field_ds_stk'}['und'][0]['value']
      ))
      ->execute();
  }
}

/**
 * Implements hook_update()
 *
 * Updates records in the custom table data_snapshots when a node is altered.
 */
function data_snapshots_update($node) {
  if ($node->type == "data_snapshot") {
    db_update('data_snapshots')
      ->fields(array(
        'guid' => "???",
        'dsmn' => $node->{'field_ds_dsds_mn'}['und'][0]['value'],
        'ptk'  =>$node->{'field_ds_ptk'}['und'][0]['value'],
        'stk'  =>$node->{'field_ds_stk'}['und'][0]['value']
      ))
      ->condition('nid', $node->{'nid'})
      ->execute();
  }
}

/**
 * Implements hook_form()
 */
function data_snapshots_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_theme()
 *
 * Enables custom templates for data snapshots.
 */
function data_snapshots_theme($existing, $type, $theme, $path) {
  return array (
    'ds_2col_stacked__node_data_snapshot_full' => array(
      'template' => 'templates/ds-2col-stacked--node-data-snapshot-full',
    ),
    'field__field_ds_disimg__data_snapshot' => array(
      'template' => 'templates/field--field_ds_disimg--data-snapshot',
    ),
    'field__field_ds_dloads__data_snapshot' => array(
      'template' => 'templates/field--field_ds_dloads--data-snapshot',
    ),
    'field__field_ds_dsds_mn__data_snapshot' => array(
      'template' => 'templates/field--field_ds_dsds_mn--data-snapshot',
    ),
    'field__field_ds_stk__data_snapshot' => array(
      'template' => 'templates/field--field_ds_stk--data-snapshot',
    ),
    'field__field_ds_ptk__data_snapshot' => array(
      'template' => 'templates/field--field_ds_ptk--data-snapshot',
    ),
    'field__body__data_snapshot' => array(
      'template' => 'templates/field--body--data-snapshot',
    ),
    'field__field_dssds_colors__data_snapshot_data_source' => array(
      'template' => 'templates/field--field_dssds_colors--data-snapshot-data-source',
    ),
    'field__field_dssds_data_matter__data_snapshot_data_source' => array(
      'template' => 'templates/field--field_dssds_data_matter--data-snapshot-data-source',
    ),
    'field__field_dssds_processing_steps__data_snapshot_data_source' => array(
      'template' => 'templates/field--field_dssds_processing_steps--data-snapshot-data-source',
    ),
  );
}

/*
 * I'm really not sure what the correct way to fetch a node field value is,
 * but this seems to work.  There has to be a better way, though.
 */
function _get_field_value($node, $field) {
  $q = field_get_items('node', $node, $field);
  return $q[0]['value'];
}

/*
 * Returns arrays of the ptks and stks of a data source when passed its
 * machine name.
 */
function _data_snapshots_get_dates($data_source) {
  $rows = db_select('data_snapshots', 'ds')
    ->fields('ds', array('nid','ptk','stk'))
    ->condition('dsmn', $data_source)
    ->orderBy('ds.ptk', 'ASC')
    ->orderBy('ds.stk', 'ASC')
    ->execute()
    ->fetchAll();
  $snapshots = array();
  if (!empty($rows)) {
    $ptk = null;
    $ptks = array();
    foreach ($rows as $row) {
      if ($row->{'ptk'} != $ptk) {
        if ($row->{'stk'} != NULL) {
          $snapshots[$row->{'ptk'}] = array();
        }
	$ptk = $row->{'ptk'};
	$ptks[] = $ptk;
      }
      if ($row->{'stk'} != NULL) {
        $snapshots[$ptk][] = $row->{'stk'};
      }
    }
  }

  return array(
	       'p' => $ptks,
	       's' => $snapshots,
	       'dsmn' => $data_source,
	       );
}

/*
 * Gets nid of data source node from its machine name.
 */
function _data_snapshots_get_data_source_nid($dsmn) {
  return db_select('field_data_field_dssds_machine_name', 'f')
    ->condition('field_dssds_machine_name_value', $dsmn)
    ->fields('f', array('entity_id'))
    ->execute()
    ->FetchField();
}

/*
 * Gets name of a data sources frequency from its machine name.
 */
function _data_snapshots_get_data_source_frequency($dsmn) {
  $query = db_select('field_data_field_dssds_machine_name', 'f')
    ->condition('field_dssds_machine_name_value', $dsmn);
  $query->join('field_data_field_dssds_image_frequency', 'ifq', '(f.entity_id = ifq.entity_id)');
  $query->join('taxonomy_term_data', 'ttd', '(ttd.tid = ifq.field_dssds_image_frequency_tid)');
  $query->fields('ttd', array('name'));

  return $query->execute()
    ->FetchField();
}

/**
 * Implements hook_view()
 *
 * This gets called before rendering any nodes defined in our hook_node_info() above for
 * which base=data_snapshots.  We can use this to modify the node object before it is
 * rendered.
 *
 * This funtion should ALWAYS return $node!!!
 *
 * What on earth?
 *
 *   The mere presence of this hook apparently changes the structure of the contents
 *   of the $node object that gets passed to the template file.  When this hook is
 *   NOT present, field values are available like:
 *       $node->{'field_ds_year'}['und'][0]['value']
 *   When this hook is present, though, the 'und' layer disappears, so the same field
 *   becomes
 *       $node->{'field_ds_year'}[0]['value']
 *   This happens regardless of what this function (data_snapshots_view) does --
 *   in particular, simply creating a data_snapshots_view function that just
 *   does "return $node" causes this.
 *
 *   Note, however, that this is true only for the $node object that
 *   gets passed to the *.tpl.php, however.  The $node object passed to
 *   data_snapshots_view() here DOES have the 'und' layer.
 *
 * UPDATE:
 *
 *   Well, it seems that making a few other changes, such as setting
 *   some fields in $node->content below, and adding another tpl.php
 *   for theming that content, caused the 'und' level to reappear.
 *
 *   The moral of this story is that whenever you change anything
 *   here, better re-examine how everything looks and fix anything
 *   that breaks!
 *
 *   Isn't Drupal wonderful!!
 *
 * ANOTHER UPDATE:
 *
 * Simply including "dsm($node)" at the top of
 * data_snapshots_view() changes the structure of the $node object
 * that is available to the template file!!!
 */
function data_snapshots_view($node, $view_mode) {
  if ($node->type != "data_snapshot" || $view_mode != 'full') {
    return $node;
  }

  $base_path = drupal_get_path('module', 'data_snapshots');
  drupal_add_css($base_path . "/css/data-snapshots.css");
  drupal_add_css($base_path . "/permalink/permalink.css");
  drupal_add_css($base_path . "/css/jquery-ui-1.10.4.custom.min.css");

  drupal_add_js($base_path . "/permalink/permalink.js",
                array('scope' => 'header', 'group' => JS_DEFAULT, 'weight' => 1001));

  drupal_add_js($base_path . "/js/jquery-ui-1.10.4.custom.js",
                array('scope' => 'header', 'group' => JS_DEFAULT, 'weight' => 1002));
  drupal_add_js($base_path . "/js/jquery.ui.touch-punch.min.js",
                array('scope' => 'header', 'group' => JS_DEFAULT, 'weight' => 1002));
  drupal_add_js($base_path . "/js/data-snapshots.js",
                array('scope' => 'header', 'group' => JS_DEFAULT, 'weight' => 1003));


  drupal_add_css($base_path . "/css/jqx.base.css");
  drupal_add_css($base_path . "/css/jqx.ui-darkness.css");

  drupal_add_js($base_path . "/js/jqwidgets/jqxcore.js",
                array('scope' => 'header', 'group' => JS_DEFAULT, 'weight' => 1004));
  drupal_add_js($base_path . "/js/jqwidgets/jqxbuttons.js",
                array('scope' => 'header', 'group' => JS_DEFAULT, 'weight' => 1004));
  drupal_add_js($base_path . "/js/jqwidgets/jqxcheckbox.js",
                array('scope' => 'header', 'group' => JS_DEFAULT, 'weight' => 1004));
  drupal_add_js($base_path . "/js/jqwidgets/jqxbuttongroup.js",
                array('scope' => 'header', 'group' => JS_DEFAULT, 'weight' => 1004));
  drupal_add_js($base_path . "/js/jqwidgets/jqxradiobutton.js",
                array('scope' => 'header', 'group' => JS_DEFAULT, 'weight' => 1004));
  drupal_add_js($base_path . "/js/jqwidgets/mods/sliderMod.js",
                array('scope' => 'header', 'group' => JS_DEFAULT, 'weight' => 1004));

  $dsds_mn = _get_field_value($node, 'field_ds_dsds_mn');
  $init_ptk = _get_field_value($node, 'field_ds_ptk');
  $init_stk = _get_field_value($node, 'field_ds_stk');
  if ($dsds_mn) {
    $datasource_nid = _data_snapshots_get_data_source_nid($dsds_mn);
    if ($datasource_nid != FALSE) {
      $node->{'datasource_node'} = node_load($datasource_nid);
    }

    $dates = _data_snapshots_get_dates($dsds_mn);
    $dates['init_ptk'] = $init_ptk;
    $dates['init_stk'] = $init_stk;
    _data_snapshots_pad_snapshots($dsds_mn, $dates['p'], $dates['s']);

    // list of themes
    $themes = array();
    $theme_lookup = array();// lookup table
    $data_sources = array();// initialized here to store keys
    $url_patterns = array();// url patterns, keyed by machine names
    $frequencies = array();// frequencies, keyed by machine names
    $theme_taxonomy_name = 'data_snapshots_themes';
    $query = db_select('taxonomy_term_data', 'ttd')
      ->fields('ttd', array('tid','name'))
      ->orderBy('ttd.weight');
    $query->leftJoin('taxonomy_vocabulary', 'tv', '(ttd.vid = tv.vid)');
    $query->condition('tv.machine_name', $theme_taxonomy_name);
    $rows = $query->execute()
      ->fetchAll();
    if (!empty($rows)) {
      foreach ($rows as $row) {
	$themes[] = $row->name;
	$theme_lookup[$row->tid] = $row->name;
	$data_sources[$row->name] = array();
      }
    }

    // map scope lookup info
    $scopes = array();
    $query = db_select('taxonomy_term_data', 'ttd')
      ->fields('ttd', array('tid','name'))
      ->orderBy('name');
    $query->leftJoin('taxonomy_vocabulary', 'tv', '(ttd.vid = tv.vid)');
    $query->condition('tv.machine_name', 'data_source_scope');
    $rows = $query->execute()
      ->fetchAll();
    if (!empty($rows)) {
      foreach ($rows as $row) {
	$scopes[$row->tid] = strtolower($row->name);
      }
    }

    // data source info
    $query = db_select('field_data_field_dssds_themes', 'th')
      ->fields('th', array('field_dssds_themes_tid'));
    $query->join('node', 'nde', '(th.entity_id = nde.nid)');
    $query->join('field_data_field_dssds_machine_name', 'mna', '(th.entity_id = mna.entity_id)');
    $query->join('field_data_field_dssds_map_scope', 'map', '(th.entity_id = map.entity_id)');
    $query->join('field_data_field_dssds_url_pattern', 'up', '(th.entity_id = up.entity_id)');
    $query->join('field_data_field_dssds_image_frequency', 'ifq', '(th.entity_id = ifq.entity_id)');
    $query->join('field_data_field_weight', 'wei', '(th.entity_id = wei.entity_id)');
    $query->join('taxonomy_term_data', 'ttd', '(ttd.tid = ifq.field_dssds_image_frequency_tid)');
    $query->fields('nde', array('title'))
      ->fields('mna', array('field_dssds_machine_name_value'))
      ->fields('map', array('field_dssds_map_scope_tid'))
      ->fields('up', array('field_dssds_url_pattern_value'))
      ->fields('ttd', array('name'))
      ->orderBy('field_weight_value');
    $rows = $query->execute()
      ->fetchAll();
    if (!empty($rows)) {
      foreach ($rows as $row) {
	$theme = $theme_lookup[$row->field_dssds_themes_tid];
	$data_source = array();
	$data_source['oname'] = $row->title;
	$data_source['mname'] = $row->field_dssds_machine_name_value;
	$data_source['scope'] = $scopes[$row->field_dssds_map_scope_tid];
	$data_sources[$theme][] = $data_source;
	$url_patterns[$row->field_dssds_machine_name_value] = $row->field_dssds_url_pattern_value;
	$frequencies[$row->field_dssds_machine_name_value] = $row->name;
      }
    }

    $settings = array(
      'snapshots' => $dates,
      'themes' => $themes,
      'data_sources' => $data_sources,
      'frequencies' => $frequencies,
      'init_theme' => (array_key_exists('theme', $_REQUEST)) ? $_REQUEST['theme'] : null,
      'patterns' => $url_patterns,
    );

    drupal_add_js(array('data_snapshots' => $settings), 'setting');
    // So now, we can access the $snapshots array from JS in the page as:
    //      Drupal.settings.data_snapshots.snapshots
  }
  return $node;
}

/**
 * Implements hook_node_type_insert().
 */
function data_snapshots_node_type_insert($content_type) {

  if ($content_type->type == 'data_snapshot') {
    // sets up alias for data snapshots
    // update this line if you wish to change the auto alias for data snapshots
    variable_set('pathauto_node_data_snapshot_pattern', 'data-snapshot/[node:field_ds_dsds_mn]-[node:field_ds_ptk]-[node:field_ds_stk]');

    // following code block taken from features module

    // Load all the existing fields and instance up-front
    $existing_fields = field_info_fields();
    $existing_instances = field_info_instances();

    foreach (data_snapshots_fields_data_snapshot() as $field) {
      // Create or update field.
      $field_config = $field['field_config'];
      if (isset($existing_fields[$field_config['field_name']])) {
        $existing_field = $existing_fields[$field_config['field_name']];
        if ($field_config + $existing_field != $existing_field) {
          field_update_field($field_config);
        }
      }
      else {
        field_create_field($field_config);
        $existing_fields[$field_config['field_name']] = $field_config;
      }

      // Create or update field instance.
      $field_instance = $field['field_instance'];
      if (isset($existing_instances[$field_instance['entity_type']][$field_instance['bundle']][$field_instance['field_name']])) {
        $existing_instance = $existing_instances[$field_instance['entity_type']][$field_instance['bundle']][$field_instance['field_name']];
        if ($field_instance + $existing_instance != $existing_instance) {
          field_update_instance($field_instance);
        }
      }
      else {
        field_create_instance($field_instance);
        $existing_instances[$field_instance['entity_type']][$field_instance['bundle']][$field_instance['field_name']] = $field_instance;
      }
    }
  }

  if ($content_type->type == 'data_snapshot_data_source') {
    // sets up alias for data snapshots
    // update this line if you wish to change the auto alias for data sources
    variable_set('pathauto_node_data_snapshot_data_source_pattern', 'data-snapshot/data-source-[node:title]');
  }
}

/**
 * Implements hook_menu().
 */
function data_snapshots_menu() {

  $items['data-snapshots/ajax'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Callback Only',
    'page callback' => '_data_snapshots_ajax',
    'page arguments' => array(t('The menu entry for this page is of type MENU_CALLBACK, so it provides only a path but not a link in the menu links, but it is the same in every other way to the simplest example.')),
    'access callback' => TRUE,
  );
  $items['admin/config/data-snapshots'] = array(
    'title' => 'Data Snapshots',
    'description' => 'Adjust Data Snapshots Module Settings',
    'position' => 'right',
    'weight' => -5,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system')
  );
  $items['admin/config/data-snapshots/settings'] = array(
    'title' => 'Data Snapshots Module Settings',
    'description' => 'Change settings for the Data Snapshots module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('data_snapshots_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM
  );

  return $items;
}

function data_snapshots_admin_settings() {
  $form['description'] = array(
    '#markup' => '<p>' . t('Use the "Run Import Now" button below to import any new Data Snapshot nodes from the feeds associated with all Data Sources.  Pay no attention to the "Save Configuration" button; it does nothing.') . '</p>',
  );
  $form['run'] = array(
    '#type' => 'submit',
    '#value' => t('Run import now'),
    '#submit' => array('data_snapshots_run_import'),
  );
  $last_import = data_snapshots_last_import_info();
  if ($last_import == null) {
    $status = '<p>' . t('Last import: no batches imported yet') . '</p>';
  } else {
    $status = '<p>' . t('Last import: %when.  The URLs imported were:</p><ul>', array('%when' => $last_import['time_imported']));
    foreach ($last_import['urls'] as $url) {
      $status .= '<li>' . $url . '</li>';
    }
    $status .= '</ul>';
  }
  $form['status'] = array(
    '#markup' => $status,
  );

##
## This is not used any more (it has been replaced with individual master feed urls for each data source node):
##
#  $form['data_snapshots_import_url'] = array(
#    '#type' => 'textfield',
#    '#title' => t('Import URL'),
#    '#default_value' => variable_get('data_snapshots_import_url'),
#    '#description' => t('Enter the master feed URL to be used for automated Data Snapshots imports; this should be a full URL, complete with http:// or https://'),
#    '#size' => 80
#  );

  return system_settings_form($form);
}

/**
 * Determines the function used to switch between frequencies. The functions are found in
 * data_snapshots.switch_callbacks.inc and rely on the frequency taxonomy.
 */
function _data_snapshots_get_callback($cur_freq, $new_freq, $cur_name, $new_name) {
  $custom_freq = 'Custom';
  $default_conversion = '_data_snapshots_default_conversion';
  
  if ($cur_freq == $custom_freq) {
    $cur_freq = $cur_freq . $cur_name;
  }
  if ($new_freq == $custom_freq) {
    $new_freq = $new_freq . $new_name;
  }
  $callback = '_data_snapshots_' . $cur_freq . '_to_' . $new_freq;

  if (function_exists($callback)) {
    return $callback;
  } else {
    return $default_conversion;
  }
}

/**
 * So that we only need one endpoint to get new data for data snapshots ajax requests
 * we switch between two different callbacks based on a parameter.
 */
function _data_snapshots_ajax() {
  if ($_POST['type'] == 'data_snapshot') {
    $result = _data_snapshots_data_snapshot_ajax($_POST);
  } else if ($_POST['type'] == 'data_source') {
    $result = _data_snapshots_data_source_ajax($_POST);
  }

  drupal_json_output($result);
  exit();
}

/**
 * Callback for getting new data snapshots. Grabs the:
 *
 *   title,
 *   annotation html,
 *   downloads section html,
 *   date generated html,
 *   permalink html
 */
function _data_snapshots_data_snapshot_ajax($parameters) {
  $query = db_select('data_snapshots', 'ds')
    ->fields('ds', array('nid'))
    ->condition('dsmn', $parameters['dsmn'])
    ->condition('ptk', $parameters['ptk']);
  if (array_key_exists('stk', $parameters)) {
    $query->condition('stk', $parameters['stk']);
  }
  $result = $query->execute()
    ->fetchAssoc();

  $new_ds_node = node_load($result['nid']);
  $result['title_html'] = $new_ds_node->title;
  $result['body_html'] = render(field_view_field('node', $new_ds_node, 'body'));
  $result['download_html'] = render(field_view_field('node', $new_ds_node, 'field_ds_dloads'));
  $result['date_html'] = render(field_view_field('node', $new_ds_node, 'field_ds_dtgen'));

  $ds_fields = ds_get_fields('node');
  $ds_permalink_field = $ds_fields['data_snapshot_permalink'];
  $ds_permalink_field['entity'] = $new_ds_node;
  $result['permalink_html'] = ds_render_code_field($ds_permalink_field);

  return $result;
}

/**
 * Callback for getting new data sources. Grabs the:
 *
 *   whole node content,
 *   node's alias
 */
function _data_snapshots_data_source_ajax($parameters) {
  $new_dsmn = $parameters['new_dsmn'];
  $callback = _data_snapshots_get_callback($parameters['current_frequency'], $parameters['new_frequency'], $parameters['current_dsmn'], $new_dsmn);

  $data_source_nid = _data_snapshots_get_data_source_nid($new_dsmn);

  $result = $callback($new_dsmn, $parameters['ptk'], $parameters['stk'], _data_snapshots_get_dates($new_dsmn));
  
  _data_snapshots_pad_snapshots($new_dsmn, $result['dates']['p'], $result['dates']['s']);

  $result['node'] = node_load($data_source_nid);

  $result['alias'] = url('node/' . $data_source_nid);

  return $result;
}

/**
 * Implements hook_entity_info_alter
 *
 * Enables custom display modes
 */
function data_snapshots_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['full']['custom settings'] = TRUE;
  $entity_info['node']['view modes']['teaser']['custom settings'] = TRUE;
  $entity_info['node']['view modes']['search_result']['custom settings'] = TRUE;

  $entity_info['node']['view modes']['nf_related_content_teaser'] = array(
    'label' => 'NF Related Content Teaser',
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['nf_category_listing'] = array(
    'label' => 'NF Category Listing',
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['short_teaser'] = array(
    'label' => 'Short Teaser',
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['tiny_teaser'] = array(
    'label' => 'Tiny Teaser',
    'custom settings' => TRUE,
  );
}

###
### Return information about the most recently run import batch.
### Returns an assoc array like the following:
###   array(
###     dsi_id        => INT,      // dsi_id of last import
###     time_imported => STRING    // human-readable string indicating date/time of last import
###     urls          => array of STRING // the urls imported in this batch
###   )
### If there have been no imports, returns null.
function data_snapshots_last_import_info() {
  $result = db_select('data_snapshots_imports', 'dsi')
      ->fields('dsi', array('dsi_id', 'time_imported'))
      ->orderBy('time_imported',  'DESC')
      ->range(0,1)
      ->execute()
      ->fetchAssoc();
  if (!$result) {
    return null;
  } else {
    $dsi_id = $result['dsi_id'];
    $time_imported = date("H:i:s \\o\\n D, M j Y", $result['time_imported']);

    $result = db_select('data_snapshots_import_urls', 'dsiu')
      ->fields('dsiu', array('url'))
      ->condition('dsi_id', $dsi_id)
      ->execute()
      ->fetchAll();
    $urls = array();
    foreach ($result as $row) {
      $urls[] = $row->{'url'};
    }
    return array(
      'dsi_id'        => $dsi_id,
      'time_imported' => $time_imported,
      'urls'          => $urls
    );
  }
}


function data_snapshots_run_import() {

  ###
  ### Get the list of URLs that have already been loaded, and store them in
  ### the `$loaded_urls` hash.  These URLs are stored in the table named
  ### `data_snapshots_import_urls`; each URL looks like
  ###     http://larry.nemac.org/Images/averagetemp-monthly-cmb/averagetemp-monthly-cmb--2015-01-23.csv
  ###

  $loaded_urls = array();
  $rows = db_select('data_snapshots_import_urls', 'dsiu')
    ->fields('dsiu', array('url'))
    ->execute()
    ->fetchAll();
  if (!empty($rows)) {
    foreach ($rows as $row) {
      $loaded_urls[$row->{'url'}] = true;
    }
  }

  ###  ###
  ###  ### Exactract the urls from the master feed file, and store any that have not
  ###  ### already been loaded in the `$urls` array
  ###  ###
  ###  $master_feed_url = variable_get('data_snapshots_import_url');
  ###  $timeout = 5;
  ###  $result = drupal_http_request($master_feed_url, array('timeout' => $timeout));
  ###  if ($result->code != 200) {
  ###    throw new Exception(t('Download of @url failed with code !code.', array('@url' => $master_feed_url, '!code' => $result->code)));
  ###  }
  ###
  ###  $urls = array();
  ###  $lines = explode("\n", $result->data);
  ###  foreach ($lines as $line) {
  ###    $url = trim($line);
  ###    if ($url != '' && (!array_key_exists($url, $loaded_urls) ||  !$loaded_urls[$url])) {
  ###      $urls[] = $url;
  ###    }
  ###  }
  

  ###
  ### Next we construct the list of URLs to load.   This is a two-step process.
  ###
  ### First, we make a list of the non-empty values of the `feed_url` field of
  ### each data_snapshot_data_source instance currently in the database.  This is
  ### stored in the `$ds_feeds` array.
  ###

  $ds_feeds = array();
  $rows = db_select('field_data_field_dssds_feed_url', 'dsfu')
    ->fields('dsfu', array('field_dssds_feed_url_value'))
    ->execute()
    ->fetchAll();
  if (!empty($rows)) {
    foreach ($rows as $row) {
      if ($row->{'field_dssds_feed_url_value'} != "") {
        $ds_feeds[] = $row->{'field_dssds_feed_url_value'};
      }
    }
  }

  ###
  ### Next, we fetch the contents of each URL in the `$ds_feeds` array; each of these is assumed to contain
  ### a list of URLs to be loaded.  We store all the ones that are not already loaded (i.e. not present in
  ### the `$loaded_urls` hash) in the `$urls` array.
  ###
  
  $urls = array();
  foreach ($ds_feeds as $ds_feed) {
    $timeout = 5;
    $result = drupal_http_request($ds_feed, array('timeout' => $timeout));
    if ($result->code != 200) {
      drupal_set_message(t('Download of @url failed with code !code.', array('@url' => $ds_feed, '!code' => $result->code)), 'error');
    } else {
      $lines = explode("\n", $result->data);
      foreach ($lines as $line) {
        $url = trim($line);
        if ($url != '' && (!array_key_exists($url, $loaded_urls) ||  !$loaded_urls[$url])) {
          $urls[] = $url;
        }
      }
    }
  }
  
  ###
  ### Now load each url from the `$urls` array:
  ###
  
  if (count($urls) > 0) {
    $dsi_id = db_insert('data_snapshots_imports')
      ->fields(array('time_imported' => time()))
      ->execute();
    foreach ($urls as $url) {
      data_snapshots_load_url($url, $dsi_id);
    }
  } else {
    drupal_set_message(t('Nothing new to import'));
  }
  
  drupal_goto('admin/config/data-snapshots/settings');
}


function data_snapshots_load_url($url, $dsi_id) {

  drupal_set_message(t('Importing data snapshots from: %url', array('%url' => $url)));

  db_insert('data_snapshots_import_urls')
    ->fields(array(
      'url'  => $url,
      'dsi_id'  => $dsi_id
    ))
    ->execute();

  $source = feeds_source("data_snapshot_importer");
  # Need to reset the state of the FeedsSource object, per comments
  # on https://drupal.org/node/2087091.  Yet another undocumented Drupal annoyance.
  $source->state( FEEDS_FETCH );
  $source->state( FEEDS_PROCESS );
  $source->state( FEEDS_PROCESS_CLEAR );
  $config = array(
    'FeedsHTTPFetcher' => array('source' => $url)
  );
  $source->addConfig($config);
  $source->save();
  while (FEEDS_BATCH_COMPLETE != $source->import());
}
